# Leon's lf settings

# Note on Image Previews
# 1. ueberzug must be installed.
# 2. The scope file (~/.config/lf/scope for me), must have a command similar to
#    mine to generate ueberzug images.
# 3. A `set cleaner` line as below is a cleaner script.
# 4. lf should be started through a wrapper script (~/.local/bin/lfub for me)
#    that creates the environment for ueberzug. This command can be be aliased
#    in your shellrc (`alias lf="lfub") or if set to a binding, should be
#    called directly instead of normal lf.

# dynamically set number of columns based on terminal width
cmd on-redraw %{{
    if [ $lf_width -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $lf_width -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}

set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'
set autoquit true

# cmds/functions
cmd open ${{
  case $(file --mime-type "$(readlink -f $f)" -b) in
    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
    image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
    text/*|application/json|inode/x-empty) $EDITOR $fx;;
    image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
    image/svg+xml) display -- $f ;;
    image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\)*$" |
      setsid -f nsxiv -aio 2>/dev/null | while read -r file; do
        [ -z "$file" ] && continue
        lf -remote "send select \"$file\""
        lf -remote "send toggle"
      done &
      ;;
    audio/*) mpv --audio-display=no $f ;;
    video/*|application/vnd.rn-realmedia) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
    application/pdf|application/vnd*|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
    application/pgp-encrypted) $EDITOR $fx ;;
    *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd mkdir $mkdir -p "$@"

cmd extract ${{
  clear; tput cup $(($(tput lines)/3)); tput bold
  set -f
  printf "%s\n\t" "$fx"
  printf "extract?[y/N]"
  read ans
  [ $ans = "y" ] && {
    case $fx in
      *.tar.bz2)   tar xjf $fx     ;;
      *.tar.gz)    tar xzf $fx     ;;
      *.bz2)       bunzip2 $fx     ;;
      *.rar)       unrar e $fx     ;;
      *.gz)        gunzip $fx      ;;
      *.tar)       tar xf $fx      ;;
      *.tbz2)      tar xjf $fx     ;;
      *.tgz)       tar xzf $fx     ;;
      *.zip)       unzip $fx       ;;
      *.Z)         uncompress $fx  ;;
      *.7z)        7z x $fx        ;;
      *.tar.xz)    tar xf $fx      ;;
    esac
  }
}}

cmd delete ${{
  clear; tput cup $(($(tput lines)/3)); tput bold
  set -f
  printf "%s\n\t" "$fx"
  printf "delete?[y/N]"
  read ans
  [ $ans = "y" ] && rm -rf -- $fx
}}

cmd moveto ${{
  clear; tput cup $(($(tput lines)/3)); tput bold
  set -f
  clear; echo "Move to where?"
  dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' $XDG_CONFIG_HOME/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
  for x in $fx; do
    eval mv -iv \"$x\" \"$dest\"
  done &&
  notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
  clear; tput cup $(($(tput lines)/3)); tput bold
  set -f
  clear; echo "Copy to where?"
  dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' $XDG_CONFIG_HOME/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
  for x in $fx; do
    eval cp -ivr \"$x\" \"$dest\"
  done &&
  notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd setbg "$1"

cmd bulkrename ${{
    tmpfile_old="$(mktemp)"
    tmpfile_new="$(mktemp)"

    [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)

    echo "$fs" > "$tmpfile_old"
    echo "$fs" > "$tmpfile_new"
    $EDITOR "$tmpfile_new"

    [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new"; exit 1; }

    paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
    done

    rm -f "$tmpfile_old" "$tmpfile_new"
    lf -remote "send $id unselect"
}}

# edit and reload config file
cmd edit-config ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd on-cd &{{
    # '&' commands run silently in background (which is what we want here),
    # but are not connected to stdout.
    # To make sure our escape sequence still reaches stdout we pipe it to /dev/tty
    printf "\033]0; ${PWD/#$HOME/\~}\007" > /dev/tty
}}
# also run at startup
on-cd

# cd into git repo's root
cmd gitroot ${{
    groot=$(git rev-parse --show-toplevel)
    [[ -z $groot ]] | lf -remote "send $id cd \"$groot\""
}}

# Bindings
source "~/.config/lf/shortcutrc"

map <a-f> edit-config
# copy file to clipboard
map <a-c> $xclip -sel clip "$f" -t `file --mime-type -b "$f"`
# copy file full path to clipboard
map <a-p> $printf "%s" "$fx" | xclip -sel clip

map <c-f> $lf -remote "send $id select '$(fzf)'"
map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' $XDG_CONFIG_HOME/shell/bm-dirs | fzf)"
map H cd ~
map g top
map D delete
map E extract
map C copyto
map M moveto
# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
map P :link
map <c-n> push :mkdir<space>""<left>
map <a-n> push $touch<space>""<left>
map <c-r> reload
map <c-s> set hidden!
map <a-g> gitroot
map <enter> shell
map x $$f
map X !$f
map o &mimeopen "$f"
map O $mimeopen --ask "$f"

# renames               # file.foo.ext
map i :rename           # file.foo[].ext
map I :rename; cmd-home # []file.foo.ext
map A :rename; cmd-end  # file.foo.ext[]
map a push i<c-f><c-k>  # file.foo.[]
map c push i<c-u>       # [].ext
# A<c-u> to do whole rename

map B bulkrename
map b $setbg $f
map S $nsxiv -t "$(pwd)" # thumbnail mode in sxiv

map <c-e> down
map <c-y> up
map V push :!nvim<space>

map W $setsid -f $TERMINAL >/dev/null 2>&1
