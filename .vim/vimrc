syntax on
filetype on
filetype plugin on
filetype indent on
let mapleader = "\<Space>"
command CFG :tabe $MYVIMRC
command THEME :tabe ~/.vim/themes.vim
autocmd BufWritePost $MYVIMRC :so $MYVIMRC

" install vim-plug your own
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'morhetz/gruvbox'
Plug 'nanotech/jellybeans.vim'
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'LunarWatcher/auto-pairs'
Plug 'jayli/vim-easycomplete'
Plug 'SirVer/ultisnips'
call plug#end()

" *** appearance ***
source ~/.vim/themes.vim

" *** coding ***
" When candinates menu pops up,
" Enter to select a completion, '\' to expand a snippet.
" (can't make Enter to expand completion and snippet at same time.)
" Tab and Shift-Tab to select net and previous suggest.
inoremap <expr> <TAB> pumvisible() ? "\<C-N>" : "\<TAB>"
inoremap <expr> <S-TAB> pumvisible() ? "\<C-P>" : "\<S-TAB>"
" noremap <Leader>dn :EasyCompleteNextDiagnostic<CR>
" noremap <Leader>dp :EasyCompletePreviousDiagnostic<CR>
noremap <Leader>gr :EasyCompleteReference<CR>
noremap <Leader>gd :EasyCompleteGotoDefinition<CR>
noremap <Leader>gb :BackToOriginalBuffer<CR>
noremap <Leader>rn :EasyCompleteRename<CR>
let g:easycomplete_lsp_checking = 0
let g:easycomplete_diagnostics_enable = 1
" Ctrl-s to edit snippet for current file type
noremap <C-S> <ESC>:UltiSnipsEdit<CR>
imap <C-S> <ESC>:UltiSnipsEdit<CR>
let g:UltiSnipsEditSplit='vertical'
let g:UltiSnipsExpandTrigger="\\"
" TAB and Shift-TAB to jump in snippets
let g:UltiSnipsJumpForwardTrigger="<TAB>"
let g:UltiSnipsJumpBackwardTrigger="<S-TAB>"

" *** common settings ***
set ai et ts=2 sw=2
" do not use space when indenting in .go
autocmd BufRead *.go :set noet
" runs gofmt after save .go file
autocmd BufWritePost *.go silent! !gofmt -w %
autocmd FileType * setlocal formatoptions-=cro
autocmd FocusLost * redraw!
set noswapfile nobk nowb " disable swap and backup file
set autoread
set mousehide
set noshowcmd
set nu rnu " line number
set title
set wrap
set linebreak
set history=1000
set numberwidth=1
set pastetoggle=<F2>
set sb spr " split
set encoding=utf-8
set wildmode=longest,list,full
set hls ic scs is " search
set vb t_vb=
set iskeyword+=:
set shellslash
" Works if your vim has clipboard feature, make yp manupilate with system clipboard.
" If `vim --version` gives -clipboard, or :echo has('clipboard') gives 0,
" that means your vim does not support this, consider compile it from source.
set clipboard^=unnamedplus
" Or, use this fallback(X11, xclip) to make it works.
" vnoremap <silent> <Leader>y :w !xclip -in -selection clipboard<CR><ESC>
" noremap <silent> <Leader>p :r !xclip -out -selection clipboard<CR><ESC>

" Return to last edit position when opening file again
autocmd BufReadPost *
  \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
  \ |   exe "normal! g`\""
  \ | endif


" *** mappings ***
" :Q to quit without saving
command Q :q!
" :W force save with sudo
command WW :w !sudo tee %<CR>
nnoremap <silent> <Leader>w :w<CR>
" jump between pairs
nnoremap <TAB> %
" jump between selected boundrys in visual mode
vnoremap <TAB> o
" quick semicolon
nnoremap <Leader>; A;<Esc>
" add space before and after a char
noremap <Leader>s i<space><ESC>la<space><ESC>
" Perform dot commands over visual blocks:
vnoremap . :normal .<CR>
" Replace all is aliased to S.
nnoremap S :%s//g<Left><Left>

" comment and uncomment //
autocmd BufRead,BufNewfile *.c,*.cpp,*.cxx,*.h,*.go,*.java,*.js noremap <Leader>/ I// <ESC>
autocmd BufRead,BufNewfile *.c,*.cpp,*.cxx,*.h,*.go,*.java,*.js noremap <Leader>\ ^3xh<ESC>

" split: horizontal, vertical
noremap <silent> <Leader>h :new<CR>
noremap <silent> <Leader>v :vnew<CR>
noremap <Leader>n :vs

" panel navigation
noremap <c-h> <c-w>h
noremap <c-l> <c-w>l
noremap <c-j> <c-w>j
noremap <c-k> <c-w>k

" tabs and buffers
noremap <Leader>t <ESC>:tabe<CR>
noremap <c-w> <ESC>:tabc<CR>
noremap <Leader>[ <ESC>:tabp<CR>
noremap <Leader>] <ESC>:tabn<CR>
noremap <silent> <Leader>' :ls<CR> " list buffer
noremap <silent> <Leader>, :bp<CR> " previous buffer
noremap <silent> <Leader>. :bn<CR> " next buffer


" *** compile, run ***
" script to compile and run single source code file,
" with and without input redirect
noremap <leader>c :w! \| !compiler "%:p"<CR>
noremap <leader>r :w! \| !compiler-red "%:p"<CR>
" make options
autocmd FileType cpp setlocal makeprg=g\+\+\ %\ \-g\ \-std\=c\+\+17\ \-Wall
autocmd FileType python setlocal makeprg=python3\ %
autocmd FileType sh setlocal makeprg=%
autocmd FileType go setlocal makeprg=go\ build\ -o\ %<\ %
" use F3 to make
noremap <F3> <ESC> :w <CR> :make <CR>
inoremap <F3> <ESC> :w <CR> :make <CR>
" F4 to run executable
noremap <F4> <ESC> :!./%<
inoremap <F4> <ESC> :!./%<
" F5 to run executable with input file 'inp'
noremap <F5> <ESC> :!./%< < inp<CR>
inoremap <F5> <ESC> :!./%< < inp<CR>

" remove tailing space when saving
autocmd BufWritePre * let currPos = getpos(".")
autocmd BufWritePre * %s/\s\+$//e
autocmd BufWritePre * %s/\n\+\%$//e
autocmd BufWritePre *.[ch] %s/\%$/\r/e
autocmd BufWritePre * cal cursor(currPos[1], currPos[2])
